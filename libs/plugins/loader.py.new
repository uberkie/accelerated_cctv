"""Minimal plugin loader used by tests.

Discovers plugin manifests under a given folder (e.g. `plugins/samples`) and
attempts to import the Python entrypoint declared in each manifest. This is a
small, well-contained implementation intended for local development and unit
tests.
"""

import glob
import os
import importlib
import re
from typing import Dict, Any, List


def _manifests(base_path: str) -> List[str]:
    if os.path.isdir(base_path):
        pattern = os.path.join(base_path, "*", "plugin.yaml")
    else:
        pattern = base_path
    return sorted(glob.glob(pattern))


def _read_manifest(path: str) -> Dict[str, Any]:
    try:
        import yaml

        with open(path, "r", encoding="utf-8") as f:
            return yaml.safe_load(f) or {}
    except Exception:
        data: Dict[str, Any] = {}
        key_re = re.compile(r"^(?P<k>[a-zA-Z0-9_\-]+):\s*(?P<v>.+)$")
        with open(path, "r", encoding="utf-8") as f:
            for line in f:
                m = key_re.match(line.strip())
                if not m:
                    continue
                k = m.group("k")
                v = m.group("v").strip()
                if v.startswith("[") and v.endswith("]"):
                    items = [s.strip().strip('\"\'') for s in v[1:-1].split(",") if s.strip()]
                    data[k] = items
                else:
                    data[k] = v
        return data


def _module_root(plugin_dir: str) -> str:
    cwd = os.getcwd()
    rel = os.path.relpath(plugin_dir, cwd)
    parts = [p for p in rel.split(os.sep) if p and p != "."]
    return ".".join(parts)


class PluginRegistry:
    def __init__(self) -> None:
        self._plugins: Dict[str, Dict[str, Any]] = {}

    def discover_and_load(self, base_path: str = "plugins") -> None:
        manifests = _manifests(base_path)
        for manifest_path in manifests:
            try:
                manifest = _read_manifest(manifest_path) or {}
                plugin_dir = os.path.dirname(manifest_path)
                module_root = _module_root(plugin_dir)
                plugin_id = manifest.get("id") or module_root
                info: Dict[str, Any] = {"manifest": manifest, "path": plugin_dir}

                entrypoint = manifest.get("entrypoint")
                if entrypoint and isinstance(entrypoint, str):
                    if ":" in entrypoint:
                        mod_name, cls_name = entrypoint.split(":", 1)
                    else:
                        mod_name, cls_name = entrypoint, None

                    if mod_name.lower() != "readme":
                        full_mod = module_root + "." + mod_name
                        try:
                            mod = importlib.import_module(full_mod)
                            info["module"] = mod
                            if cls_name:
                                cls = getattr(mod, cls_name, None)
                                if cls:
                                    try:
                                        instance = cls(manifest.get("config", {}))
                                    except Exception:
                                        try:
                                            instance = cls()
                                        except Exception:
                                            instance = None
                                    info["instance"] = instance
                        except Exception as e:
                            info["load_error"] = str(e)

                self._plugins[plugin_id] = info
            except Exception as e:
                self._plugins[manifest_path] = {"error": str(e)}

    def get(self, plugin_id: str) -> Dict[str, Any]:
        return self._plugins.get(plugin_id)

    def all(self) -> Dict[str, Dict[str, Any]]:
        return dict(self._plugins)


__all__ = ["PluginRegistry"]
